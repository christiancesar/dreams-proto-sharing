// source: flights.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.flight.Flight', null, global);
goog.exportSymbol('proto.flight.FlightListResponse', null, global);
goog.exportSymbol('proto.flight.FlightOffersRequest', null, global);
goog.exportSymbol('proto.flight.FlightOffersResponse', null, global);
goog.exportSymbol('proto.flight.FlightOffersSearch', null, global);
goog.exportSymbol('proto.flight.FlightRequest', null, global);
goog.exportSymbol('proto.flight.FlightResponse', null, global);
goog.exportSymbol('proto.flight.FlightShowRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.FlightOffersSearch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.FlightOffersSearch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.FlightOffersSearch.displayName = 'proto.flight.FlightOffersSearch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.FlightOffersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.FlightOffersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.FlightOffersRequest.displayName = 'proto.flight.FlightOffersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.FlightOffersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.FlightOffersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.FlightOffersResponse.displayName = 'proto.flight.FlightOffersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.Flight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.Flight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.Flight.displayName = 'proto.flight.Flight';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.FlightRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.FlightRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.FlightRequest.displayName = 'proto.flight.FlightRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.FlightResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.FlightResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.FlightResponse.displayName = 'proto.flight.FlightResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.FlightListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.flight.FlightListResponse.repeatedFields_, null);
};
goog.inherits(proto.flight.FlightListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.FlightListResponse.displayName = 'proto.flight.FlightListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flight.FlightShowRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flight.FlightShowRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flight.FlightShowRequest.displayName = 'proto.flight.FlightShowRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.FlightOffersSearch.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.FlightOffersSearch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.FlightOffersSearch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightOffersSearch.toObject = function(includeInstance, msg) {
  var f, obj = {
    originlocationcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destinationlocationcode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    departuredate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    returndate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    adults: jspb.Message.getFieldWithDefault(msg, 5, 0),
    children: jspb.Message.getFieldWithDefault(msg, 6, 0),
    infants: jspb.Message.getFieldWithDefault(msg, 7, 0),
    travelclass: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.FlightOffersSearch}
 */
proto.flight.FlightOffersSearch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.FlightOffersSearch;
  return proto.flight.FlightOffersSearch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.FlightOffersSearch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.FlightOffersSearch}
 */
proto.flight.FlightOffersSearch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginlocationcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationlocationcode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeparturedate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReturndate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAdults(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChildren(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInfants(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTravelclass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.FlightOffersSearch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.FlightOffersSearch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.FlightOffersSearch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightOffersSearch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOriginlocationcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestinationlocationcode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeparturedate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReturndate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAdults();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getChildren();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getInfants();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTravelclass();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string originLocationCode = 1;
 * @return {string}
 */
proto.flight.FlightOffersSearch.prototype.getOriginlocationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightOffersSearch} returns this
 */
proto.flight.FlightOffersSearch.prototype.setOriginlocationcode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destinationLocationCode = 2;
 * @return {string}
 */
proto.flight.FlightOffersSearch.prototype.getDestinationlocationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightOffersSearch} returns this
 */
proto.flight.FlightOffersSearch.prototype.setDestinationlocationcode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string departureDate = 3;
 * @return {string}
 */
proto.flight.FlightOffersSearch.prototype.getDeparturedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightOffersSearch} returns this
 */
proto.flight.FlightOffersSearch.prototype.setDeparturedate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string returnDate = 4;
 * @return {string}
 */
proto.flight.FlightOffersSearch.prototype.getReturndate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightOffersSearch} returns this
 */
proto.flight.FlightOffersSearch.prototype.setReturndate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 adults = 5;
 * @return {number}
 */
proto.flight.FlightOffersSearch.prototype.getAdults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.flight.FlightOffersSearch} returns this
 */
proto.flight.FlightOffersSearch.prototype.setAdults = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 children = 6;
 * @return {number}
 */
proto.flight.FlightOffersSearch.prototype.getChildren = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.flight.FlightOffersSearch} returns this
 */
proto.flight.FlightOffersSearch.prototype.setChildren = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 infants = 7;
 * @return {number}
 */
proto.flight.FlightOffersSearch.prototype.getInfants = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.flight.FlightOffersSearch} returns this
 */
proto.flight.FlightOffersSearch.prototype.setInfants = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string travelClass = 8;
 * @return {string}
 */
proto.flight.FlightOffersSearch.prototype.getTravelclass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightOffersSearch} returns this
 */
proto.flight.FlightOffersSearch.prototype.setTravelclass = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.FlightOffersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.FlightOffersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.FlightOffersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightOffersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    flightofferssearch: (f = msg.getFlightofferssearch()) && proto.flight.FlightOffersSearch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.FlightOffersRequest}
 */
proto.flight.FlightOffersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.FlightOffersRequest;
  return proto.flight.FlightOffersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.FlightOffersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.FlightOffersRequest}
 */
proto.flight.FlightOffersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flight.FlightOffersSearch;
      reader.readMessage(value,proto.flight.FlightOffersSearch.deserializeBinaryFromReader);
      msg.setFlightofferssearch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.FlightOffersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.FlightOffersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.FlightOffersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightOffersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlightofferssearch();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.flight.FlightOffersSearch.serializeBinaryToWriter
    );
  }
};


/**
 * optional FlightOffersSearch flightOffersSearch = 1;
 * @return {?proto.flight.FlightOffersSearch}
 */
proto.flight.FlightOffersRequest.prototype.getFlightofferssearch = function() {
  return /** @type{?proto.flight.FlightOffersSearch} */ (
    jspb.Message.getWrapperField(this, proto.flight.FlightOffersSearch, 1));
};


/**
 * @param {?proto.flight.FlightOffersSearch|undefined} value
 * @return {!proto.flight.FlightOffersRequest} returns this
*/
proto.flight.FlightOffersRequest.prototype.setFlightofferssearch = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flight.FlightOffersRequest} returns this
 */
proto.flight.FlightOffersRequest.prototype.clearFlightofferssearch = function() {
  return this.setFlightofferssearch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flight.FlightOffersRequest.prototype.hasFlightofferssearch = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.FlightOffersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.FlightOffersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.FlightOffersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightOffersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    flightoffers: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.FlightOffersResponse}
 */
proto.flight.FlightOffersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.FlightOffersResponse;
  return proto.flight.FlightOffersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.FlightOffersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.FlightOffersResponse}
 */
proto.flight.FlightOffersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightoffers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.FlightOffersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.FlightOffersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.FlightOffersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightOffersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlightoffers();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string flightOffers = 1;
 * @return {string}
 */
proto.flight.FlightOffersResponse.prototype.getFlightoffers = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightOffersResponse} returns this
 */
proto.flight.FlightOffersResponse.prototype.setFlightoffers = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.Flight.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.Flight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.Flight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.Flight.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    itineraries: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.Flight}
 */
proto.flight.Flight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.Flight;
  return proto.flight.Flight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.Flight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.Flight}
 */
proto.flight.Flight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItineraries(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.Flight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.Flight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.Flight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.Flight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getItineraries();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.flight.Flight.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.Flight} returns this
 */
proto.flight.Flight.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string itineraries = 2;
 * @return {string}
 */
proto.flight.Flight.prototype.getItineraries = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.Flight} returns this
 */
proto.flight.Flight.prototype.setItineraries = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string price = 3;
 * @return {string}
 */
proto.flight.Flight.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.Flight} returns this
 */
proto.flight.Flight.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.FlightRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.FlightRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.FlightRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    itineraries: jspb.Message.getFieldWithDefault(msg, 1, ""),
    price: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.FlightRequest}
 */
proto.flight.FlightRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.FlightRequest;
  return proto.flight.FlightRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.FlightRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.FlightRequest}
 */
proto.flight.FlightRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setItineraries(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.FlightRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.FlightRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.FlightRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItineraries();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string itineraries = 1;
 * @return {string}
 */
proto.flight.FlightRequest.prototype.getItineraries = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightRequest} returns this
 */
proto.flight.FlightRequest.prototype.setItineraries = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string price = 2;
 * @return {string}
 */
proto.flight.FlightRequest.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightRequest} returns this
 */
proto.flight.FlightRequest.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.FlightResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.FlightResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.FlightResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    flight: (f = msg.getFlight()) && proto.flight.Flight.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.FlightResponse}
 */
proto.flight.FlightResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.FlightResponse;
  return proto.flight.FlightResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.FlightResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.FlightResponse}
 */
proto.flight.FlightResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flight.Flight;
      reader.readMessage(value,proto.flight.Flight.deserializeBinaryFromReader);
      msg.setFlight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.FlightResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.FlightResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.FlightResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlight();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.flight.Flight.serializeBinaryToWriter
    );
  }
};


/**
 * optional Flight flight = 1;
 * @return {?proto.flight.Flight}
 */
proto.flight.FlightResponse.prototype.getFlight = function() {
  return /** @type{?proto.flight.Flight} */ (
    jspb.Message.getWrapperField(this, proto.flight.Flight, 1));
};


/**
 * @param {?proto.flight.Flight|undefined} value
 * @return {!proto.flight.FlightResponse} returns this
*/
proto.flight.FlightResponse.prototype.setFlight = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flight.FlightResponse} returns this
 */
proto.flight.FlightResponse.prototype.clearFlight = function() {
  return this.setFlight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flight.FlightResponse.prototype.hasFlight = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.flight.FlightListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.FlightListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.FlightListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.FlightListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    flightList: jspb.Message.toObjectList(msg.getFlightList(),
    proto.flight.Flight.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.FlightListResponse}
 */
proto.flight.FlightListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.FlightListResponse;
  return proto.flight.FlightListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.FlightListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.FlightListResponse}
 */
proto.flight.FlightListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flight.Flight;
      reader.readMessage(value,proto.flight.Flight.deserializeBinaryFromReader);
      msg.addFlight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.FlightListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.FlightListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.FlightListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlightList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.flight.Flight.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Flight flight = 1;
 * @return {!Array<!proto.flight.Flight>}
 */
proto.flight.FlightListResponse.prototype.getFlightList = function() {
  return /** @type{!Array<!proto.flight.Flight>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.flight.Flight, 1));
};


/**
 * @param {!Array<!proto.flight.Flight>} value
 * @return {!proto.flight.FlightListResponse} returns this
*/
proto.flight.FlightListResponse.prototype.setFlightList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.flight.Flight=} opt_value
 * @param {number=} opt_index
 * @return {!proto.flight.Flight}
 */
proto.flight.FlightListResponse.prototype.addFlight = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.flight.Flight, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flight.FlightListResponse} returns this
 */
proto.flight.FlightListResponse.prototype.clearFlightList = function() {
  return this.setFlightList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flight.FlightShowRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.flight.FlightShowRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flight.FlightShowRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightShowRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flight.FlightShowRequest}
 */
proto.flight.FlightShowRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flight.FlightShowRequest;
  return proto.flight.FlightShowRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flight.FlightShowRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flight.FlightShowRequest}
 */
proto.flight.FlightShowRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flight.FlightShowRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flight.FlightShowRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flight.FlightShowRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flight.FlightShowRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.flight.FlightShowRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flight.FlightShowRequest} returns this
 */
proto.flight.FlightShowRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.flight);
